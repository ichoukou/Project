/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.11
 * Generated at: 2019-02-22 01:25:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.domain;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.xnx3.j2ee.Global;

public final class notFindDomain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1550709623293L));
    _jspx_dependants.put("jar:file:/E:/github/Project/智慧校园/微官网/yunjianzan/Tomcat8.5/webapps/ROOT/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153356282000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.xnx3.j2ee.Global");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <title>未发现对应网站</title>\r\n");
      out.write("\t<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"expires\" content=\"0\">    \r\n");
      out.write(" \t<meta name=\"author\" content=\"管雷鸣\">\r\n");
      out.write("  <body>\r\n");
      out.write("  \t\r\n");
      out.write("  \t<style>\r\n");
      out.write("  \t\t.content{\r\n");
      out.write("  \t\t\twidth: 600px;\r\n");
      out.write("  \t\t\tmin-height:80%;\r\n");
      out.write("\t\t    margin: 0 auto;\r\n");
      out.write("\t\t    box-shadow: rgba(0, 0, 0, 0.06) 0px 1px 10px 2px;\r\n");
      out.write("\t\t    padding: 30px;\r\n");
      out.write("\t\t    margin-top: 90px;\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t\t.title{\r\n");
      out.write("  \t\t\tborder-bottom: 1px solid #eee;\r\n");
      out.write("\t\t    padding-top: 20px;\r\n");
      out.write("\t\t    padding-left: 10px;\r\n");
      out.write("\t\t    padding-bottom: 20px;\r\n");
      out.write("\t\t    font-size: 28px;\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t\t.info{\r\n");
      out.write("  \t\t\tpadding: 25px;\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t\t.content ul li{\r\n");
      out.write("  \t\t\tlist-style-type: decimal;\r\n");
      out.write("  \t\t\tpadding-left:10px;\r\n");
      out.write("  \t\t\tpadding-bottom:4px;\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t\t.content ul li img{\r\n");
      out.write("  \t\t\tmax-width:250px;\r\n");
      out.write("  \t\t\tpadding:4px;\r\n");
      out.write("  \t\t\tpadding-left:40px;\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t\t\r\n");
      out.write("  \t\t@media only screen and (max-width: 700px) {\r\n");
      out.write("  \t\t\t.content{\r\n");
      out.write("  \t\t\t\twidth:auto;\r\n");
      out.write("  \t\t\t\tmargin-top: 0px;\r\n");
      out.write("  \t\t\t\tbox-shadow: rgba(0, 0, 0, 0.06) 0px 0px 0px 0px;\r\n");
      out.write("  \t\t\t}\r\n");
      out.write("  \t\t\t\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t</style>\r\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("    \t<div class=\"title\">\r\n");
      out.write("    \t\t域名未绑定\r\n");
      out.write("    \t</div>\r\n");
      out.write("    \t<div class=\"info\">\r\n");
      out.write("    \t\t您的域名已解析到我们的服务器，但是未绑定到指定网站！请按照以下步骤，进行绑定\r\n");
      out.write("    \t</div>\r\n");
      out.write("    \t<ul>\r\n");
      out.write("    \t\t<li>您想将域名绑定到哪个网站？使用这个网站的账号跟密码，登陆 <a href=\"");
      out.print(Global.get("MASTER_SITE_URL") );
      out.write("login.do\" target=\"_black\">网站管理后台</a></li>\r\n");
      out.write("    \t\t<li>\r\n");
      out.write("    \t\t\t找到左侧菜单的 “系统管理” 功能， 点开，找到其下的 “网站设置”\r\n");
      out.write("    \t\t\t<div>\r\n");
      out.write("    \t\t\t\t<img src=\"http://res.weiunity.com/image/wangzhanshezhi.jpg\" />\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("    \t\t</li>\r\n");
      out.write("    \t\t<li>\r\n");
      out.write("    \t\t\t点击 “网站设置”后，弹出如下窗口，点击如图所示的 “绑定域名”，进行绑定\r\n");
      out.write("    \t\t\t<div>\r\n");
      out.write("    \t\t\t\t<img src=\"http://res.weiunity.com/image/bangdingyuming.jpg\" />\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("    \t\t</li>\r\n");
      out.write("    \t</ul>\r\n");
      out.write("    \t\r\n");
      out.write("    </div>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
