/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.11
 * Generated at: 2019-02-21 00:46:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.iw.common.list;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.xnx3.StringUtil;

public final class formSearch_005finput_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1550709623293L));
    _jspx_dependants.put("jar:file:/E:/github/Project/智慧校园/微官网/yunjianzan/Tomcat8.5/webapps/ROOT/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153356282000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.xnx3.StringUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 /* 
	列表页面，顶部的搜索框，input 默认是 type=text 的搜索，除非传入iw_type 
	共有三个参数：
	iw_label：必填，输入框前的说明文字
	iw_name：必填，输入框的name，即 <input name="" 这里的name的值
	iw_type：选填，输入框的类型，type，即 <input type="text" 这里的type的值，不配置默认是text类型。此当前支持两种类型：
				text：文本输入
				select：<select> 选择标签。使用此时，需引入状态缓存的js如：News_status.js
			  
*/ 
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");


//Label 的显示的标题
String iw_label = request.getParameter("iw_label");
//<input name="" 这里的name的值
String iw_name = request.getParameter("iw_name");
//type：[text,select]
Object typeObj = request.getParameter("iw_type");
String iw_type = "text";
if(typeObj != null){
	iw_type = typeObj.toString();
}

//request的值
String iw_name_value = request.getParameter(iw_name);
//对其进行防XSS过滤
iw_name_value = StringUtil.filterXss(iw_name_value);

String iw_input_width = request.getParameter("iw_input_width");
if(iw_input_width == null || iw_input_width.length() == 0){
	iw_input_width = "100px";
}

      out.write("\r\n");
      out.write("<label class=\"layui-form-label\">");
      out.print(iw_label );
      out.write("</label>\r\n");
      out.write("<div class=\"layui-input-inline\" style=\"width: 100px; float:left;\">\r\n");

if(iw_type.equals("text")){

      out.write("\r\n");
      out.write("\t<input style=\"");
      out.print(iw_input_width );
      out.write("\" type=\"text\" name=\"");
      out.print(iw_name );
      out.write("\" placeholder=\"\" value='");
      out.print(iw_name_value==null? "":iw_name_value  );
      out.write("' autocomplete=\"off\" class=\"layui-input\">\r\n");

}else if(iw_type.equals("select")){

      out.write("\r\n");
      out.write("\t\t<script type=\"text/javascript\">writeSelectAllOptionFor");
      out.print(iw_name );
      out.write('(');
      out.write('\'');
      out.print(iw_name_value );
      out.write("');</script>\r\n");
 } 
      out.write("\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
